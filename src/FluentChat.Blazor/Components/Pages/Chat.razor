@page "/chat"
@using System.Collections.Generic
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using Microsoft.SemanticKernel.Connectors.OpenAI
@using System.Text
@inject Kernel Kernel

<RadzenStack Orientation="Orientation.Vertical" Gap="3rem" class="rz-p-12">
    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Right">
        <RadzenGravatar Email="admin@fluentchat.ai" /><strong>TextAlign.Right</strong><br />  Radzen Blazor Components are open source and free for commercial use. You can install them from nuget or build your own copy from source.
        @((MarkupString)test)
    </RadzenText>
    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">
        <RadzenGravatar Email="info@radzen.com" /><strong>TextAlign.Left</strong><br />  Radzen Blazor Components are open source and free for commercial use. You can install them from nuget or build your own copy from source.
    </RadzenText>

    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.End">
        <RadzenGravatar Email="admin@fluentchat.ai" /><strong>TextAlign.End</strong><br />  Radzen Blazor Components are open source and free for commercial use. You can install them from nuget or build your own copy from source.
    </RadzenText>
    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start">
        <RadzenGravatar Email="info@radzen.com" /><strong>AI助手</strong><br />  @((MarkupString)Markdig.Markdown.ToHtml(content.ToString()))
    </RadzenText>
</RadzenStack>

<RadzenStack Orientation="Orientation.Vertical" Gap="3rem" class="rz-p-12">
    <RadzenRow>
        <RadzenColumn Size="10" >
            <RadzenTextBox Style="width:100%" @bind-Value="@msg" />
        </RadzenColumn>
        <RadzenColumn Size="2">
            <RadzenButton Icon="send" Click="SendAsync" />
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    IChatCompletionService chatService = default!;
    string msg = "";
    StringBuilder content = new StringBuilder();
    ChatHistory chatHistory = new ChatHistory();
    OpenAIPromptExecutionSettings executionSettings = new OpenAIPromptExecutionSettings
        {
            Temperature = 0.1
        };
    protected override void OnInitialized()
    {
        base.OnInitialized();
        chatService = Kernel.GetRequiredService<IChatCompletionService>("Ollama");
    }

    private string GetMessageStyle(bool isUser)
    {
        return isUser ? "background-color: #daf8e3; text-align: right;" : "background-color: #f1f1f1; text-align: left;";
    }

    async Task SendAsync()
    {
        chatHistory.AddUserMessage(msg);
        content.Clear();
        await foreach (var message in chatService.GetStreamingChatMessageContentsAsync(chatHistory, executionSettings, Kernel))
        {
            content.Append(message.Content);
        }

        chatHistory.AddAssistantMessage(content.ToString());
    }

    private string test = @Markdig.Markdown.ToHtml("**ChatGPT Response**\n\nThis is a _sample_ markdown response with a list:\n\n- Item 1\n- Item 2");
}
