@page "/chat"
@using System.Collections.Generic
@using FluentChat.Blazor.Models
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.ChatCompletion
@using Microsoft.SemanticKernel.Connectors.OpenAI
@using System.Text
@inject Kernel Kernel

<RadzenDataList AllowVirtualization="true" Style="height:400px;overflow:auto;"
                WrapItems="false" AllowPaging="false" 
                Data="@chatMessages" TItem="ChatMessageDto">
    <Template Context="message">
        <RadzenRow Gap="0">
            @if(message.IsAssistant)
            {
                <RadzenColumn>
                    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Start">
                        <RadzenGravatar Email="info@radzen.com" /><strong>AI助手</strong><br />  @((MarkupString)Markdig.Markdown.ToHtml(message.Content))
                    </RadzenText>
                </RadzenColumn>
            }
            else
            {
                <RadzenColumn Size="10" Offset="2">
                    <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.End">
                        <RadzenGravatar Email="admin@fluentchat.ai" /><strong>You</strong><br />  @((MarkupString)Markdig.Markdown.ToHtml(message.Content))
                    </RadzenText>
                </RadzenColumn>
            }                     
        </RadzenRow>
    </Template>
</RadzenDataList>

<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.End" Gap="3rem" class="rz-p-12">
    <RadzenRow>
        <RadzenColumn Size="10" >
            <RadzenTextBox @oninput="HandleInput" @onkeydown="HandleKeyDown" Style="width:100%" @bind-Value="@msg" />
        </RadzenColumn>
        <RadzenColumn Size="2">
            <RadzenButton Icon="send" Click="SendAsync" />
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    IChatCompletionService chatService = default!;
    string? msg = "";
    StringBuilder content = new StringBuilder();
    ChatHistory chatHistory = new ChatHistory();
    OpenAIPromptExecutionSettings executionSettings = new OpenAIPromptExecutionSettings
        {
            Temperature = 0.1
        };
    List<ChatMessageDto> chatMessages = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();
        chatService = Kernel.GetRequiredService<IChatCompletionService>("Ollama");
    }

    private string GetMessageStyle(bool isUser)
    {
        return isUser ? "background-color: #daf8e3; text-align: right;" : "background-color: #f1f1f1; text-align: left;";
    }

    void HandleInput(ChangeEventArgs e)
    {
        msg = e.Value?.ToString();
    }

    async Task HandleKeyDown(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            await SendAsync();
        }
    }

    async Task SendAsync()
    {
        if (string.IsNullOrEmpty(msg))
        {
            return;
        }

        chatMessages.Add(new ChatMessageDto { IsAssistant = false, Content = msg });
        var assistant = new ChatMessageDto { IsAssistant = true, Content = "思考中..." };
        chatMessages.Add(assistant);
        StateHasChanged();
        chatHistory.AddUserMessage(msg);
        content.Clear();
        msg = "";
        await foreach (var message in chatService.GetStreamingChatMessageContentsAsync(chatHistory, executionSettings, Kernel))
        {
            content.Append(message.Content);
            assistant.Content = content.ToString();
            StateHasChanged();
        }

        chatHistory.AddAssistantMessage(content.ToString());
    }

    private string test = @Markdig.Markdown.ToHtml("**ChatGPT Response**\n\nThis is a _sample_ markdown response with a list:\n\n- Item 1\n- Item 2");
}
